// glTF 2.0 / Binary glTF (glb)

include "glTF.fbs";

namespace glTF_2_0.glb;

struct Header {
	/// magic equals 0x46546C67. It is ASCII string 'glTF', and can be used to identify data as Binary glTF.
	magic: uint = 0x46546C67;

	/// version indicates the version of the Binary glTF container format. This specification defines version 2.
	version: uint = 2;

	/// length is the total length of the Binary glTF, including Header and all Chunks, in bytes.
	length: uint;
}


table JSONChunk {
	/// chunkLength is the length of chunkData, in bytes.
	/// NOTE: must be modulo 4
	chunkLength: uint;
	
	/// chunkType indicates the type of chunk. See Table 1 for details.
	/// chunkType equals 0x4E4F534A, ASCII string 'JSON'
	chunkType: uint = 0x4E4F534A;
	
	/// chunkData is a json payload of chunk.
	/// must be padded with 0x20/[space] to fit alignment
	chunkData: [ubyte](nested_flatbuffer: "Root");
}


table BinaryChunk {
	/// chunkLength is the length of chunkData, in bytes.
	/// NOTE: must be modulo 4
	chunkLength: uint;
	
	/// chunkType indicates the type of chunk. See Table 1 for details.
	/// chunkType equals 0x004E4942	, ASCII string 'BIN'	
	chunkType: uint = 0x004E4942;
	
	/// chunkData is a binary/json payload of chunk.
	/// must be padded with 0x00 to fit alignment
	chunkData: [ubyte];
}


table glTF_B {
	header: Header(required);
	json: JSONChunk(required);
	bin: BinaryChunk;
}
